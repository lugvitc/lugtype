{
  "compilerOptions": {
    "target": "es6" /* Set the JavaScript language version for emitted JavaScript and include compatible library declarations. */,
    "lib": [
      "ESNext",
      "DOM",
      "DOM.Iterable"
    ] /* Specify a set of bundled library declaration files that describe the target runtime environment. */,
    "module": "ES6" /* Specify what module code is generated. */,
    "moduleResolution": "node" /* Specify how TypeScript looks up a file from a given module specifier. */,
    "paths": {
      "@account/*": ["./src/scripts/account/*.ts"],
      "@ape": ["./src/scripts/ape/index.ts"],
      "@ape/*": ["./src/scripts/ape/*.ts"],
      "@constants/*": ["./src/scripts/constants/*.ts"],
      "@controllers/*": ["./src/scripts/controllers/*.ts"],
      "@elements/*": ["./src/scripts/elements/*.ts"],
      "@observables/*": ["./src/scripts/observables/*.ts"],
      "@pages/*": ["./src/scripts/pages/*.ts"],
      "@popups/*": ["./src/scripts/popups/*.ts"],
      "@settings/*": ["./src/scripts/settings/*.ts"],
      "@states/*": ["./src/scripts/states/*.ts"],
      "@test/*": ["./src/scripts/test/*.ts"],
      "@utils/*": ["./src/scripts/utils/*.ts"],
      "@root/*": ["./src/scripts/*.ts"],
      "@styles/*": ["./src/styles/*.scss"]
    },
    "types": [
      "jquery",
      "select2"
    ] /* Specify type package names to be included without being referenced in a source file. */,
    "allowUmdGlobalAccess": true /* Allow accessing UMD globals from modules. */,
    "resolveJsonModule": true /* Enable importing .json files */,
    "allowJs": true /* Allow JavaScript files to be a part of your program. Use the `checkJS` option to get errors from these files. */,
    "outDir": "./build" /* Specify an output folder for all emitted files. */,
    "newLine": "lf" /* Set the newline character for emitting files. */,
    "esModuleInterop": true /* Emit additional JavaScript to ease support for importing CommonJS modules. This enables `allowSyntheticDefaultImports` for type compatibility. */,
    "forceConsistentCasingInFileNames": true /* Ensure that casing is correct in imports. */,
    "strict": true /* Enable all strict type-checking options. */,
    "noImplicitAny": true /* Enable error reporting for expressions and declarations with an implied `any` type.. */,
    "strictNullChecks": true /* When type checking, take into account `null` and `undefined`. */,
    "strictFunctionTypes": true /* When assigning functions, check to ensure parameters and the return values are subtype-compatible. */,
    "strictBindCallApply": true /* Check that the arguments for `bind`, `call`, and `apply` methods match the original function. */,
    "strictPropertyInitialization": true /* Check for class properties that are declared but not set in the constructor. */,
    "noImplicitThis": true /* Enable error reporting when `this` is given the type `any`. */,
    "useUnknownInCatchVariables": true /* Type catch clause variables as 'unknown' instead of 'any'. */,
    "alwaysStrict": true /* Ensure 'use strict' is always emitted. */,
    "noUnusedLocals": true /* Enable error reporting when a local variables aren't read. */,
    "noUnusedParameters": true /* Raise an error when a function parameter isn't read */,
    "exactOptionalPropertyTypes": false /* Interpret optional property types as written, rather than adding 'undefined'. */,
    "noImplicitReturns": true /* Enable error reporting for codepaths that do not explicitly return in a function. */,
    "noFallthroughCasesInSwitch": true /* Enable error reporting for fallthrough cases in switch statements. */,
    "noUncheckedIndexedAccess": false /* Include 'undefined' in index signature results */,
    "noImplicitOverride": true /* Ensure overriding members in derived classes are marked with an override modifier. */,
    "noPropertyAccessFromIndexSignature": true /* Enforces using indexed accessors for keys declared using an indexed type */,
    "allowUnusedLabels": false /* Disable error reporting for unused labels. */,
    "allowUnreachableCode": false /* Disable error reporting for unreachable code. */,

    /* Completeness */
    // "skipDefaultLibCheck": true,                      /* Skip type checking .d.ts files that are included with TypeScript. */
    "skipLibCheck": true /* Skip type checking all .d.ts files. */
  },
  "include": ["./src/**/*.ts"],
  "files": ["src/scripts/modules.d.ts"]
}
